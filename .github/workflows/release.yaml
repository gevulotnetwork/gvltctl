# From https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: Release

on:
  workflow_dispatch:
  push:
    tags: # tags must start with v
      - "v[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "${{ github.ref_name }}" | sed -En 's/^(.*)$/VERSION=\1/p' >> $GITHUB_ENV

      - name: Get the gvltctl release version from the tag
        if: env.RELEASE_NAME == ''
        run: echo "RELEASE_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        run: |
          VERSION=${VERSION#v} # strip leading v if present only for the Cargo.toml check
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        # env.VERSION is the tag name, which has leading v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --title $VERSION
    outputs:
      version: ${{ env.VERSION }}
      release_name: ${{ env.RELEASE_NAME }}

  build-release:
    name: ${{ matrix.build }}
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1
      # To ensure openssl is static linked
      OPENSSL_STATIC: 1
      # Build static
      RUSTFLAGS: "-C target-feature=+crt-static"
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: ubuntu-x86
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        # - build: ubuntu-aarch64
        #   os: ubuntu-latest
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        #   strip: aarch64-linux-gnu-strip
        - build: macos-x86
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |-
          sudo apt-get update
          sudo apt-get install -y openssl ca-certificates pkg-config cmake libssl-dev

    - name: Install packages (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install openssl pkg-config cmake

    - name: Install buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ github.token }}

    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        repo-token: ${{ github.token }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      # Build without Cross for native target
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set target variables
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"

    - name: Build release binary
      run: |
        ${{ env.CARGO }} build --bin gvltctl --verbose --release ${{ env.TARGET_FLAGS }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/gvltctl.exe"
        else
          bin="target/${{ matrix.target }}/release/gvltctl"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      run: strip "$BIN"

    - name: Strip release binary (cross)
      if: env.CARGO == 'cross' && matrix.strip != ''
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          "rustembedded/cross:${{ matrix.target }}" \
          "${{ matrix.strip }}" \
          "/target/${{ matrix.target }}/release/gvltctl"

    - name: Strip release binary (native strip)
      if: matrix.os != 'macos-latest' && matrix.strip == ''
      run: strip "$BIN"

    - name: Determine archive name
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=gvltctl-${{ matrix.target }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      run: |
        mkdir -p "$ARCHIVE"
        cp "$BIN" "$ARCHIVE"/
        cp README.md "$ARCHIVE"/

    - name: Build archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE.zip" "$ARCHIVE"
        certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
        echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

    - name: Build archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release_name="${{ needs.create-release.outputs.version }}"
        gh release upload "$release_name" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
